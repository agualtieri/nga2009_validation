raw <- SheetList[[1]]
clean <- SheetList[[1]]
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
View(clean)
## load data
clean <-read.xlsx("./inputs/jmmi_dataset_march_2021_update_1.xlsx")
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
View(clean)
library(readxl)
clean <- read_excel("inputs/jmmi_dataset_march_2021_update_1.xlsx")
View(clean)
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
View(clean.i)
library(readxl)
clean <- read_excel("inputs/jmmi_dataset_march_2021_update_1.xlsx")
View(clean)
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
write.xlsx(clean.c, paste0("./outputs/nga2009_jmmi_cleaning issues_",lubridate::today(),".xlsx"))
write.xlsx(clean.i, paste0("./outputs/nga2009_jmmi_cleaning issues_",lubridate::today(),".xlsx"))
## JMMI validation
rm(list = ls())
## libs
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(cluster)
## sources
source("./R/data_falsification.R")
source("./R/check_log.R")
## load tool
tool <- read.xlsx("./inputs/kobo_tool.xlsx")
## load data
data <-"./inputs/jmmi_dataset_may_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
raw <- SheetList[[1]]
log <- SheetList[[2]]
clean <- SheetList[[1]]
## test for falsification
sil <- calculateEnumeratorSimilarity(raw, tool, "enum_id", "location_city")
View(log)
## load data
data <-"./inputs/jmmi_dataset_may_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
raw <- SheetList[[1]]
log <- SheetList[[2]]
clean <- SheetList[[1]]
## test for falsification
sil <- calculateEnumeratorSimilarity(raw, tool, "enum_id", "location_city")
## test for falsification
simil.surv <- calculateDifferences(raw, tool)
## test for falsification
simil.surv <- calculateDifferences(clean, tool)
View(clean)
View(tool)
names(clean)[names(clean) == "_uuid"] <- "uuid"
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
View(clean.i)
clean$telephone_number
clean.c <- semi_join(clean.i, log, c("uuid" = "uuid"))
View(clean.c)
clean <- SheetList[[3]]
names(clean)[names(clean) == "_uuid"] <- "uuid"
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
View(clean.i)
## check log
log.c <- check_log(clean, log)
## check log
log <- log %>% filter(question.name %in% names(clean))
log.c <- check_log(clean, log)
View(log.c)
log.c <- check_log(clean, log) %>% filter(!identical(new.value, value_extracted))
log.c <- check_log(clean, log) %>% filter(identical(new.value, value_extracted))
log.c <- check_log(clean, log)
View(log.c)
log.c <- check_log(clean, log) %>% mutate(check = ifelse(new.value == value_extracted, "Log Applied", "Please check")) %>% filter(., "Please check")
log.c <- check_log(clean, log) %>% mutate(check = ifelse(new.value == value_extracted, "Log Applied", "Please check")) %>% filter(., check == "Please check")
View(log.c)
write.xlsx(log.c, paste0("./outputs/nga2009_jmmi_log application_",lubridate::today(),".xlsx"))
View(clean)
## minimum standards
price.vec <- clean %>% select(ends_with("_price"))
View(price.vec)
## minimum standards
names(price.vec) <- clean %>% select(ends_with("_price"))
## minimum standards
names(price.vec) <- clean %>% select(ends_with("_price"))
source("./R/minimum_standards.R")
## minimum standards
colnames(price.vec) <- clean %>% select(ends_with("_price"))
min.standards <- min.standards(clean, "town", ends_with("_price"))
min.standards <- minium_standards(clean, "town", ends_with("_price"))
View(min.standards)
min.standards <- minium_standards(clean, "town", ends_with("_price")) %>% filter(., minium_standards == "requirement not met")
min.standards <- minium_standards(clean, "town", ends_with("_price")) %>% filter(., minimum_standards == "requirement not met")
write.xlsx(min.standards, paste0("./outputs/nga2009_jmmi_standards not met_",lubridate::today(),".xlsx"))
## similar surveys
similar.surveys <- calculateDifferences(clean, tool)
View(similar.surveys)
## similar surveys
clean$X1 <- NULL
similar.surveys <- calculateDifferences(clean, tool)
View(similar.surveys)
similar.surveys <- calculateDifferences(clean, tool) %>% filter(., number.different.columns < 6)
View(similar.surveys)
source("./R/check_time.R")
View(clean)
## time checks
time.c <- check_time(clean, "5", "60")
View(time.c)
## time checks
time.c <- check_time(clean, "5", "60") %>% filter(., value < 5)
View(time.c)
## time checks
time.c <- check_time(clean, "5", "60") %>% filter(., value < 4)
write.xlsx(time.c, paste0("./outputs/time check_",lubridate::today(),".xlsx"))
View(clean)
View(clean)
clean.red <- clean %>% select("uuid", "trader_type")
time.c <- left_join(time.c, clean.red, "uuid")
View(time.c)
clean.red <- clean %>% select("uuid", "items_sell")
time.c <- left_join(time.c, clean.red, "uuid")
write.xlsx(time.c, paste0("./outputs/time check_",lubridate::today(),".xlsx"))
write.xlsx(similar.surveys, paste0("./outputs/similar surveys_",lubridate::today(),".xlsx"))
source("./R/item_boxplots.R")
## price analysis
item_boxplots(clean, "town", ends_with("_price"))
clean$onions_price
price.analysis <- clean %>% select("town", starts_with("sell_"), contains("_unit_"), ends_with("_price"))
View(price.analysis)
price.analysis <- clean %>% select("town", starts_with("sell_"), ends_with("_price"))
View(price.analysis)
price.analysis <- clean %>% select("town", ends_with("_price"))
price.analysis <- clean %>% select("town", ends_with("_unit"), ends_with("_price"))
price.analysis <- clean %>% select("town", ends_with("_unit"), ends_with("_price"))
price.comparison <- price.analysis %>% group_by("town", ends_with("_unit")) %>% summarise_all(., mean)
View(minium_standards)
View(minium_standards)
price.comparison <- price.analysis %>% group_by("town", ends_with("_unit")) %>% summarise(., mean)
price.comparison <- price.analysis %>% group_by("town", select(., ends_with("_unit"))) %>% summarise(., mean)
price.comparison <- price.analysis %>% group_by("town", select(., ends_with("_unit"))) %>% summarise(., mean = mean())
View(price.analysis)
View(minium_standards)
price.analysis <- clean %>% select("town", ends_with("_unit"), ends_with("_price")) %>% melt()
View(price.analysis)
View(price.analysis)
price.comparison <- price.analysis %>% group_by("town", select(., ends_with("_unit"))) %>% summarise(., mean = mean())
price.analysis <- clean %>% select("town", ends_with("_price")) %>% melt()
price.comparison <- price.analysis %>% group_by("town") %>% summarise(., mean = mean())
View(price.analysis)
price.comparison <- price.analysis %>% group_by("town") %>% summarise_all(., mean = mean())
View(minium_standards)
price.comparison <- price.analysis %>% group_by("town") %>% filter(!is.na(value)) %>% summarise(., mean = mean())
price.comparison <- price.analysis %>% group_by("town") %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = mean())
?summarise
price.comparison <- price.analysis %>% group_by("town") %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = mean(.), min = min(.), max = max(.))
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = mean(),
min = min(),
max = max())
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = mean(value),
min = min(value),
max = max(value))
View(price.comparison)
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value))
View(clean)
View(clean)
price.analysis <- clean %>% select("lga", "town", ends_with("_price")) %>% melt()
View(price.analysis)
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value))
View(price.comparison)
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value))
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(outlier = ifelse(sd >= 3*max, "outlier" , "ok"),
inlier = ifelse(sd <= 3*min, "inlier" , "ok"))
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(outlier = ifelse(sd >= 3*max, "outlier" , "ok"),
inlier = ifelse(sd <= min/3, "inlier" , "ok"))
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value))
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
## JMMI validation
rm(list = ls())
## libs
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(cluster)
## sources
source("./R/data_falsification.R")
source("./R/check_log.R")
source("./R/minimum_standards.R")
source("./R/check_time.R")
source("./R/item_boxplots.R")
## load tool
tool <- read.xlsx("./inputs/kobo_tool.xlsx")
clean <- read.csv("./inputs/cleaned_june_jmmi_raw_data.csv", stringsAsFactors = FALSE)
View(clean)
clean$X <- NULL
names(clean)[names(clean) == "_uuid"] <- "uuid"
View(clean)
clean$X_index <- NULL
clean$X_index <- NULL
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean <- clean %>% mutate(., index = 1:nrow(.))
## check data
clean.i <- inspect_all(clean) %>% mutate(uuid= clean[.$index,"uuid",drop=T],
area = clean[.$index,"location_city",drop=T]) %>% filter(!is.na(uuid))
View(clean.i)
write.xlsx(clean.i, paste0("./outputs/cleaning issues_",lubridate::today(),".xlsx"))
## check log
log <- log %>% filter(question.name %in% names(clean))
log <- read.csv("./inputs/UPDATED_CLEANING_LOG_jmmi.csv", stringsAsFactors = FALSE)
View(check_log)
View(log)
## check log
log <- log %>% filter(Question %in% names(clean))
log.c <- check_log(data = clean, log = log, variable = "Question",
old_log_var = "Old_Value", new_log_var = "New_Value",
uuid_data = "uuid", uuid_log = "X_uuid") %>%
mutate(check = ifelse(Old_Value == value_extracted, "Log Applied", "Please check")) %>% filter(., check == "Please check")
View(log.c)
log.c <- check_log(data = clean, log = log, variable = "Question",
old_log_var = "Old_Value", new_log_var = "New_Value",
uuid_data = "uuid", uuid_log = "X_uuid") %>%
mutate(check = ifelse(New_Value == value_extracted, "Log Applied", "Please check")) %>% filter(., check == "Please check")
## minimum standards
min.standards <- minium_standards(clean, "town", ends_with("_price")) %>% filter(., minimum_standards == "requirement not met")
View(min.standards)
write.xlsx(min.standards, paste0("./outputs/standards not met_",lubridate::today(),".xlsx"))
## similar surveys
similar.surveys <- calculateDifferences(clean, tool) %>% filter(., number.different.columns < 6)
write.xlsx(similar.surveys, paste0("./outputs/similar surveys_",lubridate::today(),".xlsx"))
## time checks
time.c <- check_time(clean, "5", "60") %>% filter(., value < 4)
View(time.c)
clean.red <- clean %>% select("uuid", "items_sell")
time.c <- left_join(time.c, clean.red, "uuid")
View(time.c)
write.xlsx(time.c, paste0("./outputs/time check_",lubridate::today(),".xlsx"))
## price analysis
item_boxplots(clean, "town", ends_with("_price"))
price.analysis <- clean %>% select("lga", "town", ends_with("_price")) %>% melt()
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
View(price.comparison)
View(price.analysis)
measures.analysis <- clean %>% select(ends_with("_unit"), ends_with("_price")) %>% melt()
View(measures.analysis)
View(price.analysis)
rice <- clean %>% select("town", "rice_unit", "rice_price")
View(rice)
View(price.analysis)
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
View(price.comparison)
price.comparison <- price.analysis %>% group_by(lga, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
View(price.analysis)
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(value)) %>%
dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_unit)) %>%
dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_unit)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
View(rice)
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_unit)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price))
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_price)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price))
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_price)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
## By item
items <- clean %>% select(ends_with("_price"))
View(items)
splitted_df <- clean %>% group_split(starts_with("_price"))
splitted_df <- sapply(items,
function(x) df[startsWith(names(clean),x)],
simplify = FALSE)
splitted_df <- sapply(items,
function(x) clean[startsWith(names(clean),x)],
simplify = FALSE)
## By item
names(items) <- clean %>% select(ends_with("_price"))
View(items)
## By item
colnames(items) <- clean %>% select(ends_with("_price"))
View(items)
rm(items)
## By item
items <- names(clean) %>% select(ends_with("_price"))
## By item
names(items) <- select(clean, ends_with("_price"))
## By item
names(items) <- select(clean, ends_with("_price"))
select(clean, ends_with("_price"))
## By item
items <- select(clean, ends_with("_price")) %>% colnames(.)
splitted_df <- sapply(items,
function(x) clean[startsWith(names(clean),x)],
simplify = FALSE)
View(splitted_df)
## By item
items <- select(clean, ends_with("_unit"), ends_with("_price")) %>% colnames(.)
splitted_df <- sapply(items,
function(x) clean[startsWith(names(clean),x)],
simplify = FALSE)
items
items <- select(clean, ends_with("_price")) %>% grepl("_price", "") %>% colnames(.)
?grepl
?gsub
?gsub
items <- select(clean, ends_with("_price")) %>% gsub("_price", "") %>% colnames(.)
items <- select(clean, ends_with("_price")) %>% colnames(.)
items <- gsub("_price", "", items)
items <- select(clean, ends_with("_price")) %>% gsub("_price", "", .) %>% colnames(.)
items <- select(clean, ends_with("_price")) %>% colnames(.)
items <- gsub("_price", "", items)
splitted_df <- sapply(items,
function(x) clean[startsWith(names(clean),x)],
simplify = FALSE)
View(splitted_df)
View(splitted_df)
View(splitted_df)
unit.price.comparison <- map(splitted_df, function(x) select(ends_with("_unit"), ends_with("_price")))
unit.price.comparison <- map(splitted_df, function(x) group_by(ends_with("_unit") %>% filter(!is.na(ends_with("_price")))
%>% summarise(., mean = round(mean(ends_with("_price"))))))
View(item_boxplots)
View(minium_standards)
unit.price.comparison <- map(splitted_df, function(x) group_by(!!sym(ends_with("_unit")) %>% filter(!is.na(!!sym(ends_with("_price")))
%>% summarise(., mean = round(mean(!!sym(ends_with("_price"))))))))
unit.price.comparison <- map(splitted_df, function(x) group_by(select(., ends_with("_unit")) %>% filter(!is.na(select(., ends_with("_price")))
%>% summarise(., mean = round(mean(select(.,ends_with("_price"))))))))
unit.price.comparison <- map(splitted_df, function(x) group_by(select(ends_with("_unit")) %>% filter(!is.na(select(., ends_with("_price")))
%>% summarise(., mean = round(mean(select(.,ends_with("_price"))))))))
splitted_df <- lapply(splitted_df, function (x) {select(y, ends_with("_unit"), ends_with("_price"))})
splitted_df <- lapply(splitted_df, function (x) {select(x, ends_with("_unit"), ends_with("_price"))})
View(splitted_df)
View(splitted_df)
names <- c("unit", "price")
splitted_df <- lapply(splitted_df, setNames, names)
View(splitted_df)
# Apply summarise function
unit.comparison <- lapply(splitted_df, summarise(., mean = round(mean(price))))
# Apply summarise function
unit.comparison <- lapply(splitted_df, summarise(mean = round(mean(price))))
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>%  group_by_at(1) %>%  summarise(mean = round(mean)))
View(splitted_df)
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>%  group_by_at(unit) %>%  summarise(mean = round(mean(price))))
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>%  group_by_at(1) %>%  summarise_at(vars(names(.x)[2], mean = round(mean(2)))))
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>%  group_by_at(unit) %>%  summarise_at(vars(names(.x)[price], mean = round(mean(price)))))
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>%  group_by_at(unit) %>% summarise(mean = round(mean(price))))
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>% group_by(unit) %>% summarise(mean = round(mean(price))))
View(unit.comparison)
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>% group_by(unit) %>% summarise(mean = round(mean(price)),
min = min(price),
max = max(price),
sd = sd(price)))
write.xlsx(unit.comparison, "./outputs/unit_comparison.xlsx")
## By unit
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_price)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price)) %>%
mutate(check = ifelse(sd>mean, "check", "ok")) %>% filter(check == "check")
View(rice)
## By unit
rice <- clean %>% select("town", "rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_price)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price))
View(rice)
## By unit
rice <- clean %>% select("rice_unit", "rice_price") %>% group_by(town, rice_unit) %>% filter(!is.na(rice_price)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price))
## By unit
rice <- clean %>% select("rice_unit", "rice_price") %>% group_by(rice_unit) %>% filter(!is.na(rice_price)) %>%
dplyr::summarise(., mean = round(mean(rice_price),0),
min = min(rice_price),
max = max(rice_price),
sd = sd(rice_price))
View(rice)
View(splitted_df)
View(splitted_df[["rice"]])
View(unit.comparison)
View(unit.comparison[["rice"]])
View(rice)
# Apply summarise function
unit.comparison <- map(splitted_df, ~ .x %>% group_by(unit) %>% filter(!is.na(price))%>% summarise(mean = round(mean(price), 0),
min = min(price),
max = max(price),
sd = sd(price)))
View(unit.comparison)
View(unit.comparison[["rice"]])
View(unit.comparison)
View(unit.comparison[["rice"]])
write.xlsx(unit.comparison, "./outputs/unit_comparison.xlsx")
write.xlsx(unit.comparison, paste0("./outputs/unit and price comparison by item_",lubridate::today(),".xlsx"))
unit.comparison <- lapply(unit.comparison, function(x) { x[is.na(x)] <- "standard unit"})
unit.comparison <- lapply(unit.comparison, function(x) { x[is.na(x)] <- "standard_unit"})
write.xlsx(price.comparison, paste0("./outputs/price comparison by town_",lubridate::today(),".xlsx"))
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value))
write.xlsx(price.comparison, paste0("./outputs/price comparison by town_",lubridate::today(),".xlsx"))
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value))
write.xlsx(price.comparison, paste0("./outputs/price comparison by town_",lubridate::today(),".xlsx"))
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(coeff_var = sd/mean,
check = ifelse(coeff_var > 1, "check", "ok")))
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(coeff_var = sd/mean,
check = ifelse(coeff_var > 1, "check", "ok"))
price.comparison <- price.analysis %>% group_by(town, variable) %>% filter(!is.na(value)) %>% dplyr::summarise(., mean = round(mean(value),0),
min = min(value),
max = max(value),
sd = sd(value)) %>%
mutate(coeff_var = sd/mean,
check = ifelse(coeff_var > 1, "check", "ok"))
write.xlsx(price.comparison, paste0("./outputs/price comparison by town_",lubridate::today(),".xlsx"))
